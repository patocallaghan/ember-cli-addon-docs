'use strict';

define('dummy/tests/acceptance/docs-route-test', ['qunit', 'ember-qunit', 'ember-cli-mirage/test-support/setup-mirage', '@ember/test-helpers'], function (_qunit, _emberQunit, _setupMirage, _testHelpers) {
  'use strict';

  (0, _qunit.module)('Acceptance | Docs route test', function (hooks) {
    (0, _emberQunit.setupApplicationTest)(hooks);
    (0, _setupMirage.default)(hooks);

    (0, _qunit.test)('the docs route renders', async function (assert) {
      await (0, _testHelpers.visit)('/docs');

      assert.equal((0, _testHelpers.currentURL)(), '/docs');
    });

    (0, _qunit.test)('I can visit an autogenerated docs route', async function (assert) {
      await (0, _testHelpers.visit)('/docs');
      await (0, _testHelpers.click)('[data-test-label="{{docs-hero}}"]');

      assert.dom('h1').hasText('DocsHero');
    });

    (0, _qunit.test)('I can visit a nested child route within the docs pages and still have the correct links', async function (assert) {
      await (0, _testHelpers.visit)('/sandbox/docs/one/child');
      assert.dom('[data-test-next-link] > a').hasText('Two');
    });
  });
});
define('dummy/tests/acceptance/sandbox/api/components-test', ['qunit', 'ember-qunit', 'ember-cli-mirage/test-support/setup-mirage', '@ember/test-helpers', 'dummy/tests/pages/api/module'], function (_qunit, _emberQunit, _setupMirage, _testHelpers, _module2) {
  'use strict';

  (0, _qunit.module)('Acceptance | Sandbox | API | components', function (hooks) {
    (0, _emberQunit.setupApplicationTest)(hooks);
    (0, _setupMirage.default)(hooks);

    (0, _qunit.test)('nested components work', async function (assert) {
      await (0, _testHelpers.visit)('/sandbox');
      await _module2.default.navItems.findOne({ text: '{{simple-list}}' }).click();

      assert.equal((0, _testHelpers.currentURL)(), '/sandbox/api/components/simple-list', 'correct url');

      await _module2.default.navItems.findOne({ text: '{{simple-list/\u200Bitem}}' }).click();

      assert.equal((0, _testHelpers.currentURL)(), '/sandbox/api/components/simple-list/item', 'correct url');
    });

    (0, _qunit.test)('component page index works', async function (assert) {
      await (0, _testHelpers.visit)('/sandbox');
      await _module2.default.navItems.findOne({ text: '{{esdoc-component}}' }).click();

      assert.equal((0, _testHelpers.currentURL)(), '/sandbox/api/components/esdoc-component', 'correct url');

      let indexItems = _module2.default.index.items.map(i => i.text);

      assert.equal(indexItems.length, 7, 'correct number of items rendered');
      assert.ok(indexItems.includes('Yields') && indexItems.includes('Arguments'), 'correct sections rendered');

      await _module2.default.toggles.findOne({ text: 'Internal' }).click();
      await (0, _testHelpers.waitUntil)(() => _module2.default.index.items.length === 12);

      indexItems = _module2.default.index.items.map(i => i.text);

      assert.ok(indexItems.includes('Fields') && indexItems.includes('Methods'), 'correct sections rendered');

      await _module2.default.toggles.findOne({ text: 'Private' }).click();
      await (0, _testHelpers.waitUntil)(() => _module2.default.index.items.length === 13);

      indexItems = _module2.default.index.items.map(i => i.text);

      assert.equal(indexItems.length, 13, 'correct number of items rendered');
      assert.ok(indexItems.includes('_privateField'), 'private field rendered');
    });

    (0, _qunit.test)('welcome page \'Edit this page\' link is correct', async function (assert) {
      await (0, _testHelpers.visit)('/sandbox');

      const editThisPageLinkHref = await _module2.default.editLink.href;

      assert.equal(editThisPageLinkHref, 'https://github.com/ember-learn/ember-cli-addon-docs/edit/master/tests/dummy/app/pods/sandbox/index/template.md');
    });
  });
});
define('dummy/tests/acceptance/sandbox/api/guides-test', ['qunit', 'ember-qunit', 'ember-cli-mirage/test-support/setup-mirage', '@ember/test-helpers', 'dummy/tests/pages/api/module'], function (_qunit, _emberQunit, _setupMirage, _testHelpers, _module2) {
  'use strict';

  (0, _qunit.module)('Acceptance | Sandbox | API | Guides', function (hooks) {
    (0, _emberQunit.setupApplicationTest)(hooks);
    (0, _setupMirage.default)(hooks);

    (0, _qunit.test)('page index works', async function (assert) {
      await (0, _testHelpers.visit)('/sandbox');

      assert.equal((0, _testHelpers.currentURL)(), `/sandbox`, 'correct url');

      let indexItems = _module2.default.index.items.map(i => i.text);

      assert.equal(indexItems.length, 2, 'correct number of items rendered');
      assert.ok(indexItems.includes('Subsection') && indexItems.includes('Sub-subsection'), 'correct sections rendered');
    });
  });
});
define('dummy/tests/acceptance/sandbox/api/helpers-test', ['qunit', 'ember-qunit', 'ember-cli-mirage/test-support/setup-mirage', '@ember/test-helpers', 'dummy/tests/pages/api/module', 'dummy/tests/pages/api/class'], function (_qunit, _emberQunit, _setupMirage, _testHelpers, _module2, _class) {
  'use strict';

  (0, _qunit.module)('Acceptance | Sandbox | API | helpers', function (hooks) {
    (0, _emberQunit.setupApplicationTest)(hooks);
    (0, _setupMirage.default)(hooks);

    (0, _qunit.module)('standard helpers', function () {
      for (let documenter of ['esdoc', 'yuidoc']) {
        let helperName = `${documenter}Helper`;
        let kebabName = `${documenter}-helper`;

        (0, _qunit.test)(`{{${kebabName}}}`, async function (assert) {
          await (0, _testHelpers.visit)('/sandbox');
          await _module2.default.navItems.findOne({ text: `{{${kebabName}}}` }).click();

          assert.equal((0, _testHelpers.currentURL)(), `/sandbox/api/helpers/${kebabName}`, 'correct url');

          let functionsSection = _module2.default.sections.findOne({ header: 'Functions' });

          assert.ok(functionsSection.isPresent, 'Renders the functions section');

          let helperItem = functionsSection.items.findOne(i => i.header.includes(helperName));

          assert.ok(helperItem.isPresent, 'Renders the helper item');

          assert.equal(helperItem.header, `${helperName}(number: number): number`, 'renders the type signature of the helper correctly');

          assert.equal(helperItem.importPath, `import { ${helperName} } from 'sandbox/helpers/${kebabName}';`, 'renders the import path correctly');

          assert.equal(helperItem.params.length, 1, 'renders the item parameter');
        });
      }
    });

    (0, _qunit.module)('class helpers', function () {
      for (let documenter of ['ESDoc', 'YUIDoc']) {
        let helperName = `${documenter}ClassHelper`;
        let kebabName = `${documenter.toLowerCase()}-class-helper`;

        (0, _qunit.test)(`{{${kebabName}}}`, async function (assert) {
          await (0, _testHelpers.visit)('/sandbox');
          await _class.default.navItems.findOne({ text: `{{${kebabName}}}` }).click();

          assert.equal((0, _testHelpers.currentURL)(), `/sandbox/api/helpers/${kebabName}`, 'correct url');

          assert.equal(_class.default.title, helperName, 'Renders the class title correctly');

          let methodsSection = _module2.default.sections.findOne({ header: 'Methods' });

          assert.ok(methodsSection.isPresent, 'Renders the methods section');

          let computeItem = methodsSection.items.findOne(i => i.header.includes('compute'));

          assert.ok(computeItem.isPresent, 'Renders the helper item');

          assert.equal(computeItem.header, 'compute(number: number): number', 'renders the type signature of the helper correctly');

          assert.equal(computeItem.params.length, 1, 'renders the item parameter');
        });
      }
    });
  });
});
define('dummy/tests/acceptance/search-test', ['qunit', 'ember-qunit', 'ember-cli-mirage/test-support/setup-mirage', '@ember/test-helpers', 'dummy/tests/pages/app'], function (_qunit, _emberQunit, _setupMirage, _testHelpers, _app) {
  'use strict';

  (0, _qunit.module)('Acceptance | Search', function (hooks) {
    (0, _emberQunit.setupApplicationTest)(hooks);
    (0, _setupMirage.default)(hooks);

    (0, _qunit.test)('search works for guides pages', async function (assert) {
      await (0, _testHelpers.visit)('/');
      await _app.default.fillInSearchQuery('quickstart');

      await (0, _testHelpers.waitUntil)(() => _app.default.searchResults.items.length > 0);

      await (0, _testHelpers.click)((0, _testHelpers.find)('[data-test-search-result] a'));
      assert.equal((0, _testHelpers.currentURL)(), '/docs/quickstart');
    });

    (0, _qunit.test)('search works for API pages', async function (assert) {
      await (0, _testHelpers.visit)('/');
      await _app.default.fillInSearchQuery('hero');

      await (0, _testHelpers.waitUntil)(() => _app.default.searchResults.items.length > 0);

      await (0, _testHelpers.click)((0, _testHelpers.find)('[data-test-search-result] a'));
      assert.equal((0, _testHelpers.currentURL)(), '/docs/api/components/docs-hero');
    });
  });
});
define('dummy/tests/acceptance/version-selector-test', ['qunit', 'ember-qunit', 'ember-cli-mirage/test-support/setup-mirage', '@ember/test-helpers', 'dummy/config/environment'], function (_qunit, _emberQunit, _setupMirage, _testHelpers, _environment) {
  'use strict';

  (0, _qunit.module)('Acceptance | Version selector test', function (hooks) {
    (0, _emberQunit.setupApplicationTest)(hooks);
    (0, _setupMirage.default)(hooks);

    (0, _qunit.test)('if the current version is latest and latest has a tag, it displays the tag', async function (assert) {
      this.owner.lookup('service:project-version').set('currentVersion', {
        "sha": "53b73465d31925f26fd1f77881aefcaccce2915a",
        "tag": 'v0.1.0',
        "path": "",
        "key": "-latest",
        "name": "latest"
      });

      await (0, _testHelpers.visit)('/');

      assert.dom('[data-test-id="current-version"]').includesText('v0.1.0');
    });

    (0, _qunit.test)(`if the current version is latest and latest doesn't have a tag, it displays Latest`, async function (assert) {
      this.owner.lookup('service:project-version').set('currentVersion', {
        "sha": "53b73465d31925f26fd1f77881aefcaccce2915a",
        "tag": null,
        "path": "",
        "key": "-latest",
        "name": "latest"
      });

      await (0, _testHelpers.visit)('/');

      assert.dom('[data-test-id="current-version"]').includesText('Latest');
    });

    (0, _qunit.test)(`the version selector renders correctly`, async function (assert) {
      server.get('/versions.json', {
        "-latest": {
          "sha": "53b73465d31925f26fd1f77881aefcaccce2915a",
          "tag": null,
          "path": "",
          "name": "Latest"
        },
        "master": {
          "sha": "53b73465d31925f26fd1f77881aefcaccce2915a",
          "tag": null,
          "path": "master",
          "name": "master"
        },
        "v0.1.0": {
          "sha": "d752437850bc9833ea3e354095b501473b0420ae",
          "tag": "v0.1.0",
          "path": "v0.1.0",
          "name": "v0.1.0"
        }
      });

      await (0, _testHelpers.visit)('/');
      await (0, _testHelpers.click)('[data-test-id="current-version"]');

      assert.dom('[data-test-id="version"]:nth-child(1)').includesText('Latest', 'latest is rendered first');
      assert.dom('[data-test-id="version"]:nth-child(1)').includesText('53b73', 'latest renders a sha when tag is null');
      assert.dom('[data-test-id="version"]:nth-child(1)').includesText('check', 'the current version has a check');

      assert.dom('[data-test-id="version"]:nth-child(2)').includesText('master', 'master is rendered secon');
      assert.dom('[data-test-id="version"]:nth-child(2)').includesText('53b73');

      assert.dom('[data-test-id="version"]:nth-child(3)').includesText('v0.1.0', 'tags are rendered last');
      assert.dom('[data-test-id="version"]:nth-child(3)').includesText('d7524');
    });

    (0, _qunit.test)(`the version selector renders a tag for latest if present`, async function (assert) {
      server.get('/versions.json', {
        "-latest": {
          "sha": "53b73465d31925f26fd1f77881aefcaccce2915a",
          "tag": 'v0.1.0',
          "path": "",
          "name": "Latest"
        },
        "master": {
          "sha": "53b73465d31925f26fd1f77881aefcaccce2915a",
          "tag": null,
          "path": "master",
          "name": "master"
        },
        "v0.1.0": {
          "sha": "d752437850bc9833ea3e354095b501473b0420ae",
          "tag": "v0.1.0",
          "path": "v0.1.0",
          "name": "v0.1.0"
        }
      });

      await (0, _testHelpers.visit)('/');
      await (0, _testHelpers.click)('[data-test-id="current-version"]');

      assert.dom('[data-test-id="version"]:nth-child(1)').includesText('Latest', 'latest is rendered first');
      assert.dom('[data-test-id="version"]:nth-child(1)').includesText('v0.1.0', 'latest renders a tag if present');
    });

    (0, _qunit.module)('with a custom primary branch configured', function (hooks) {
      let oldPrimaryBranch;
      hooks.beforeEach(function () {
        oldPrimaryBranch = _environment.default.primaryBranch;
        _environment.default.primaryBranch = 'develop';
      });

      hooks.afterEach(function () {
        _environment.default.primaryBranch = oldPrimaryBranch;
      });

      (0, _qunit.test)(`the version selector honors the primary branch`, async function (assert) {
        server.get('/versions.json', {
          "-latest": {
            "sha": "53b73465d31925f26fd1f77881aefcaccce2915a",
            "tag": null,
            "path": "",
            "name": "Latest"
          },
          "master": {
            "sha": "53b73465d31925f26fd1f77881aefcaccce2915a",
            "tag": null,
            "path": "master",
            "name": "master"
          },
          "develop": {
            "sha": "53b73465d31925f26fd1f77881aefcaccce2915a",
            "tag": null,
            "path": "develop",
            "name": "develop"
          }
        });

        await (0, _testHelpers.visit)('/');
        await (0, _testHelpers.click)('[data-test-id="current-version"]');

        assert.dom('[data-test-id="version"]:nth-child(1)').includesText('Latest', 'latest is rendered first');
        assert.dom('[data-test-id="version"]:nth-child(1)').includesText('53b73', 'latest renders a sha when tag is null');
        assert.dom('[data-test-id="version"]:nth-child(1)').includesText('check', 'the current version has a check');

        assert.dom('[data-test-id="version"]:nth-child(2)').includesText('develop', 'develop is rendered second');
        assert.dom('[data-test-id="version"]:nth-child(2)').includesText('53b73');

        assert.dom('[data-test-id="version"]:nth-child(3)').includesText('master', 'other branches are rendered last');
        assert.dom('[data-test-id="version"]:nth-child(3)').includesText('53b73');
      });
    });
  });
});
define('dummy/tests/app.lint-test', [], function () {
  'use strict';

  QUnit.module('ESLint | app');

  QUnit.test('app.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'app.js should pass ESLint\n\n');
  });

  QUnit.test('pods/docs/components/docs-demo/controller.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'pods/docs/components/docs-demo/controller.js should pass ESLint\n\n');
  });

  QUnit.test('pods/docs/components/docs-demo/demo2/component.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'pods/docs/components/docs-demo/demo2/component.js should pass ESLint\n\n');
  });

  QUnit.test('pods/sandbox/api/item/route.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'pods/sandbox/api/item/route.js should pass ESLint\n\n');
  });

  QUnit.test('pods/sandbox/route.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'pods/sandbox/route.js should pass ESLint\n\n');
  });

  QUnit.test('resolver.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'resolver.js should pass ESLint\n\n');
  });

  QUnit.test('router.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'router.js should pass ESLint\n\n');
  });
});
define('dummy/tests/helpers/destroy-app', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = destroyApp;
  function destroyApp(application) {
    Ember.run(application, 'destroy');
    if (window.server) {
      window.server.shutdown();
    }
  }
});
define('dummy/tests/helpers/ember-cli-clipboard', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.triggerSuccess = triggerSuccess;
  exports.triggerError = triggerError;

  exports.default = function () {
    Ember.Test.registerAsyncHelper('triggerCopySuccess', function (app, selector = '.copy-btn') {
      fireComponentActionFromApp(app, selector, 'success');
    });

    Ember.Test.registerAsyncHelper('triggerCopyError', function (app, selector = '.copy-btn') {
      fireComponentActionFromApp(app, selector, 'error');
    });
  };

  /* === Integration Test Helpers === */

  /**
   * Fires `success` action for an instance of a copy-button component
   * @function triggerSuccess
   * @param {Object} context - integration test’s this context
   * @param {String|Element} selector - selector of the copy-button instance
   * @returns {Void}
   */
  function triggerSuccess(context, selector) {
    fireComponentAction(context, selector, 'success');
  }

  /**
   * Fires `error` action for an instance of a copy-button component
   * @function triggerError
   * @param {Object} context - integration test’s this context
   * @param {String|Element} selector - selector of the copy-button instance
   * @returns {Void}
   */
  function triggerError(context, selector) {
    fireComponentAction(context, selector, 'error');
  }

  /* === Acceptance Test Helpers === */

  /**
   * Default export is a function that registers acceptance test helpers
   */


  /* === Private Functions === */

  /**
   * Fires named action for an instance of a copy-button component in an app
   * @function fireComponentActionFromApp
   * @param {Object} app - Ember application
   * @param {String|Element} selector - selector of the copy-button instance
   * @param {String} actionName - name of action
   * @returns {Void}
   */
  function fireComponentActionFromApp(app, selector, actionName) {
    fireComponentAction({
      container: app.__container__,
      $: app.$
    }, selector, actionName);
  }

  /**
   * Fires named action for an instance of a copy-button component
   * @function fireComponentAction
   * @param {Object} context - test context
   * @param {String|Element} selector - selector of the copy-button instance
   * @param {String} actionName - name of action
   * @returns {Void}
   */
  function fireComponentAction(context, selector, actionName) {
    let component = getComponentBySelector(context, selector);
    fireActionByName(component, actionName);
  }

  /**
   * Fetches component reference for a given context and selector
   * @function getComponentBySelector
   * @param {Object} context - test context
   * @param {String|Element} selector - selector of the copy-button instance
   * @returns {Object} component object
   */
  function getComponentBySelector(context, selector = '.copy-btn') {
    let emberId = context.$(selector).attr('id');
    return context.container.lookup('-view-registry:main')[emberId];
  }

  /**
   * Fires a component's action given an action name
   * @function fireActionByName
   * @param {Ember.Component} component - component to fire action from
   * @param {String} actionName - name of action
   * @returns {Void}
   */
  function fireActionByName(component, actionName) {
    let action = component[actionName];

    Ember.run(() => {
      if (typeof action === 'string') {
        component.sendAction(action);
      } else {
        action();
      }
    });
  }
});
define('dummy/tests/helpers/ember-keyboard/register-test-helpers', ['exports', 'ember-keyboard', 'ember-keyboard/fixtures/modifiers-array', 'ember-keyboard/fixtures/mouse-buttons-array', 'ember-keyboard/utils/get-cmd-key'], function (exports, _emberKeyboard, _modifiersArray, _mouseButtonsArray, _getCmdKey) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.default = function () {
    Ember.Test.registerAsyncHelper('keyDown', function (app, attributes, element) {
      return keyEvent(app, attributes, 'keydown', element);
    });

    Ember.Test.registerAsyncHelper('keyUp', function (app, attributes, element) {
      return keyEvent(app, attributes, 'keyup', element);
    });

    Ember.Test.registerAsyncHelper('keyPress', function (app, attributes, element) {
      return keyEvent(app, attributes, 'keypress', element);
    });

    Ember.Test.registerAsyncHelper('mouseDown', function (app, attributes, element) {
      return keyEvent(app, attributes, 'mousedown', element);
    });

    Ember.Test.registerAsyncHelper('mouseUp', function (app, attributes, element) {
      return keyEvent(app, attributes, 'mouseup', element);
    });

    Ember.Test.registerAsyncHelper('touchStart', function (app, attributes, element) {
      return keyEvent(app, attributes, 'touchstart', element);
    });

    Ember.Test.registerAsyncHelper('touchEnd', function (app, attributes, element) {
      return keyEvent(app, attributes, 'touchend', element);
    });
  };

  const keyEvent = function keyEvent(app, attributes, type, element) {
    const event = (attributes || '').split('+').reduce((event, attribute) => {
      if (_modifiersArray.default.indexOf(attribute) > -1) {
        attribute = attribute === 'cmd' ? (0, _getCmdKey.default)() : attribute;
        event[`${attribute}Key`] = true;
      } else if (_mouseButtonsArray.default.indexOf(attribute) > -1) {
        event.button = (0, _emberKeyboard.getMouseCode)(attribute);
      } else {
        event.keyCode = (0, _emberKeyboard.getKeyCode)(attribute);
      }

      return event;
    }, {});

    return app.testHelpers.triggerEvent(element || document.body, type, event);
  };
});
define('dummy/tests/helpers/ember-test-selectors', ['exports', 'ember-test-selectors'], function (exports, _emberTestSelectors) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });


  const { deprecate } = Ember;

  let message = 'Importing testSelector() from "<appname>/tests/helpers/ember-test-selectors" is deprecated. ' + 'Please import testSelector() from "ember-test-selectors" instead.';

  deprecate(message, false, {
    id: 'ember-test-selectors.test-selector-import',
    until: '0.2.0',
    url: 'https://github.com/simplabs/ember-test-selectors#usage'
  });

  exports.default = _emberTestSelectors.default;
});
define('dummy/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'dummy/tests/helpers/start-app', 'dummy/tests/helpers/destroy-app'], function (exports, _qunit, _startApp, _destroyApp) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.default = function (name, options = {}) {
    (0, _qunit.module)(name, {
      beforeEach() {
        this.application = (0, _startApp.default)();

        if (options.beforeEach) {
          return options.beforeEach.apply(this, arguments);
        }
      },

      afterEach() {
        let afterEach = options.afterEach && options.afterEach.apply(this, arguments);
        return Ember.RSVP.resolve(afterEach).then(() => (0, _destroyApp.default)(this.application));
      }
    });
  };
});
define('dummy/tests/helpers/resolver', ['exports', 'dummy/resolver', 'dummy/config/environment'], function (exports, _resolver, _environment) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });


  const resolver = _resolver.default.create();

  resolver.namespace = {
    modulePrefix: _environment.default.modulePrefix,
    podModulePrefix: _environment.default.podModulePrefix
  };

  exports.default = resolver;
});
define('dummy/tests/helpers/start-app', ['exports', 'dummy/app', 'dummy/config/environment'], function (exports, _app, _environment) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = startApp;
  function startApp(attrs) {
    let attributes = Ember.merge({}, _environment.default.APP);
    attributes.autoboot = true;
    attributes = Ember.merge(attributes, attrs); // use defaults, but you can override;

    return Ember.run(() => {
      let application = _app.default.create(attributes);
      application.setupForTesting();
      application.injectTestHelpers();
      return application;
    });
  }
});
define('dummy/tests/page-object', ['exports', 'ember-cli-page-object'], function (exports, _emberCliPageObject) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.fullScope = exports.getContext = exports.findElement = exports.findElementWithAssert = exports.buildSelector = exports.visitable = exports.value = exports.triggerable = exports.text = exports.property = exports.notHasClass = exports.isVisible = exports.isPresent = exports.isHidden = exports.is = exports.hasClass = exports.selectable = exports.fillable = exports.create = exports.count = exports.contains = exports.collection = exports.clickable = exports.clickOnText = exports.attribute = exports.alias = undefined;
  Object.defineProperty(exports, 'buildSelector', {
    enumerable: true,
    get: function () {
      return _emberCliPageObject.buildSelector;
    }
  });
  Object.defineProperty(exports, 'findElementWithAssert', {
    enumerable: true,
    get: function () {
      return _emberCliPageObject.findElementWithAssert;
    }
  });
  Object.defineProperty(exports, 'findElement', {
    enumerable: true,
    get: function () {
      return _emberCliPageObject.findElement;
    }
  });
  Object.defineProperty(exports, 'getContext', {
    enumerable: true,
    get: function () {
      return _emberCliPageObject.getContext;
    }
  });
  Object.defineProperty(exports, 'fullScope', {
    enumerable: true,
    get: function () {
      return _emberCliPageObject.fullScope;
    }
  });
  exports.alias = _emberCliPageObject.alias;
  exports.attribute = _emberCliPageObject.attribute;
  exports.clickOnText = _emberCliPageObject.clickOnText;
  exports.clickable = _emberCliPageObject.clickable;
  exports.collection = _emberCliPageObject.collection;
  exports.contains = _emberCliPageObject.contains;
  exports.count = _emberCliPageObject.count;
  exports.create = _emberCliPageObject.create;
  exports.fillable = _emberCliPageObject.fillable;
  exports.selectable = _emberCliPageObject.fillable;
  exports.hasClass = _emberCliPageObject.hasClass;
  exports.is = _emberCliPageObject.is;
  exports.isHidden = _emberCliPageObject.isHidden;
  exports.isPresent = _emberCliPageObject.isPresent;
  exports.isVisible = _emberCliPageObject.isVisible;
  exports.notHasClass = _emberCliPageObject.notHasClass;
  exports.property = _emberCliPageObject.property;
  exports.text = _emberCliPageObject.text;
  exports.triggerable = _emberCliPageObject.triggerable;
  exports.value = _emberCliPageObject.value;
  exports.visitable = _emberCliPageObject.visitable;
  exports.default = {
    alias: _emberCliPageObject.alias,
    attribute: _emberCliPageObject.attribute,
    clickOnText: _emberCliPageObject.clickOnText,
    clickable: _emberCliPageObject.clickable,
    collection: _emberCliPageObject.collection,
    contains: _emberCliPageObject.contains,
    count: _emberCliPageObject.count,
    create: _emberCliPageObject.create,
    fillable: _emberCliPageObject.fillable,
    hasClass: _emberCliPageObject.hasClass,
    is: _emberCliPageObject.is,
    isHidden: _emberCliPageObject.isHidden,
    isPresent: _emberCliPageObject.isPresent,
    isVisible: _emberCliPageObject.isVisible,
    notHasClass: _emberCliPageObject.notHasClass,
    property: _emberCliPageObject.property,
    selectable: _emberCliPageObject.fillable,
    text: _emberCliPageObject.text,
    triggerable: _emberCliPageObject.triggerable,
    value: _emberCliPageObject.value,
    visitable: _emberCliPageObject.visitable
  };
});
define('dummy/tests/pages/api/class', ['exports', 'dummy/tests/pages/base', 'ember-classy-page-object'], function (exports, _base, _emberClassyPageObject) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });


  const ClassPage = _base.default.extend({
    navItems: (0, _emberClassyPageObject.collection)({ scope: '[data-test-id="nav-item"]' }),

    title: (0, _emberClassyPageObject.text)('[data-test-class-name]'),
    description: (0, _emberClassyPageObject.text)('[data-test-class-description]'),

    sections: (0, _emberClassyPageObject.collection)({
      scope: '[data-test-api-section]',

      header: (0, _emberClassyPageObject.text)('[data-test-section-header]'),

      items: (0, _emberClassyPageObject.collection)({
        scope: '[data-test-item]',

        header: (0, _emberClassyPageObject.text)('[data-test-item-header]'),
        importPath: (0, _emberClassyPageObject.text)('[data-test-import-path]'),
        description: (0, _emberClassyPageObject.text)('[data-test-item-description]'),

        params: (0, _emberClassyPageObject.collection)({
          scope: '[data-test-item-params] [data-test-item-param]'
        })
      })
    })
  });

  exports.default = ClassPage.create();
});
define('dummy/tests/pages/api/module', ['exports', 'dummy/tests/pages/base', 'ember-classy-page-object'], function (exports, _base, _emberClassyPageObject) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });


  const ModulePage = _base.default.extend({
    navItems: (0, _emberClassyPageObject.collection)({ scope: '[data-test-id="nav-item"]' }),

    toggles: (0, _emberClassyPageObject.collection)({
      scope: '[data-test-toggle]'
    }),

    sections: (0, _emberClassyPageObject.collection)({
      scope: '[data-test-api-section]',

      header: (0, _emberClassyPageObject.text)('[data-test-section-header]'),

      items: (0, _emberClassyPageObject.collection)({
        scope: '[data-test-item]',

        header: (0, _emberClassyPageObject.text)('[data-test-item-header]'),
        importPath: (0, _emberClassyPageObject.text)('[data-test-import-path]'),
        description: (0, _emberClassyPageObject.text)('[data-test-item-description]'),

        params: (0, _emberClassyPageObject.collection)({
          scope: '[data-test-item-params] [data-test-item-param]'
        })
      })
    }),

    // eslint-disable-next-line ember/avoid-leaking-state-in-ember-objects
    editLink: {
      scope: '[data-test-edit-page-link]',
      href: (0, _emberClassyPageObject.attribute)('href', 'a')
    },

    // eslint-disable-next-line ember/avoid-leaking-state-in-ember-objects
    index: {
      scope: '[data-test-page-index]',

      items: (0, _emberClassyPageObject.collection)({
        scope: '[data-test-index-item]'
      })
    }
  });

  exports.default = ModulePage.create();
});
define('dummy/tests/pages/app', ['exports', 'dummy/tests/pages/base'], function (exports, _base) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _base.default.create();
});
define('dummy/tests/pages/base', ['exports', 'ember-classy-page-object'], function (exports, _emberClassyPageObject) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });


  const DefaultPage = _emberClassyPageObject.default.extend({
    // eslint-disable-next-line ember/avoid-leaking-state-in-ember-objects
    fillInSearchQuery: (0, _emberClassyPageObject.fillable)('[data-test-search-box-input]'),
    // eslint-disable-next-line ember/avoid-leaking-state-in-ember-objects
    searchResults: {
      scope: '[data-test-search-result-list]',
      items: (0, _emberClassyPageObject.collection)({
        scope: '[data-test-search-result]'
      })
    }
  });

  exports.default = DefaultPage;
});
define('dummy/tests/pages/guide', ['exports', 'dummy/tests/pages/base', 'ember-classy-page-object'], function (exports, _base, _emberClassyPageObject) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });


  const GuidePage = _base.default.extend({
    navItems: (0, _emberClassyPageObject.collection)({ scope: '[data-test-id="nav-item"]' }),

    // eslint-disable-next-line ember/avoid-leaking-state-in-ember-objects
    index: {
      scope: '[data-test-page-index]',

      items: (0, _emberClassyPageObject.collection)({
        scope: '[data-test-index-item]'
      })
    }
  });

  exports.default = GuidePage.create();
});
define('dummy/tests/test-helper', ['dummy/app', 'dummy/config/environment', '@ember/test-helpers', 'ember-qunit'], function (_app, _environment, _testHelpers, _emberQunit) {
  'use strict';

  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));

  (0, _emberQunit.start)();
});
define('dummy/tests/tests.lint-test', [], function () {
  'use strict';

  QUnit.module('ESLint | tests');

  QUnit.test('acceptance/docs-route-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'acceptance/docs-route-test.js should pass ESLint\n\n');
  });

  QUnit.test('acceptance/sandbox/api/components-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'acceptance/sandbox/api/components-test.js should pass ESLint\n\n');
  });

  QUnit.test('acceptance/sandbox/api/guides-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'acceptance/sandbox/api/guides-test.js should pass ESLint\n\n');
  });

  QUnit.test('acceptance/sandbox/api/helpers-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'acceptance/sandbox/api/helpers-test.js should pass ESLint\n\n');
  });

  QUnit.test('acceptance/search-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'acceptance/search-test.js should pass ESLint\n\n');
  });

  QUnit.test('acceptance/version-selector-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'acceptance/version-selector-test.js should pass ESLint\n\n');
  });

  QUnit.test('helpers/destroy-app.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'helpers/destroy-app.js should pass ESLint\n\n');
  });

  QUnit.test('helpers/module-for-acceptance.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'helpers/module-for-acceptance.js should pass ESLint\n\n');
  });

  QUnit.test('helpers/resolver.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'helpers/resolver.js should pass ESLint\n\n');
  });

  QUnit.test('helpers/start-app.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'helpers/start-app.js should pass ESLint\n\n');
  });

  QUnit.test('pages/api/class.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'pages/api/class.js should pass ESLint\n\n');
  });

  QUnit.test('pages/api/module.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'pages/api/module.js should pass ESLint\n\n');
  });

  QUnit.test('pages/app.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'pages/app.js should pass ESLint\n\n');
  });

  QUnit.test('pages/base.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'pages/base.js should pass ESLint\n\n');
  });

  QUnit.test('pages/guide.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'pages/guide.js should pass ESLint\n\n');
  });

  QUnit.test('test-helper.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'test-helper.js should pass ESLint\n\n');
  });
});
define('dummy/config/environment', [], function() {
  var prefix = 'dummy';
try {
  var metaName = prefix + '/config/environment';
  var rawConfig = document.querySelector('meta[name="' + metaName + '"]').getAttribute('content');
  var config = JSON.parse(unescape(rawConfig));

  var exports = { 'default': config };

  Object.defineProperty(exports, '__esModule', { value: true });

  return exports;
}
catch(err) {
  throw new Error('Could not read config from meta tag with name "' + metaName + '".');
}

});

require('dummy/tests/test-helper');
EmberENV.TESTS_FILE_LOADED = true;
//# sourceMappingURL=tests.map
